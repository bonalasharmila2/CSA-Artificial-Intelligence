import math

def alpha_beta(node, depth, alpha, beta, maximizing_player):
    if depth == 0 or isinstance(node, int):
        return node

    if maximizing_player:
        max_eval = -math.inf
        for child in node:
            eval = alpha_beta(child, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for child in node:
            eval = alpha_beta(child, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

# Game tree with nested layers (leaf nodes are integers)
game_tree = [
    [[3, 5, 6], [9, 1, 2]],
    [[0, 7, -1], [4, 8, 10]]
]

# Evaluate the tree using alpha-beta pruning
best_value = alpha_beta(game_tree, depth=3, alpha=-math.inf, beta=math.inf, maximizing_player=True)
print("Best value (with alpha-beta pruning):", best_value)
