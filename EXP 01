import heapq

goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

def heuristic(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0 and state[i][j] != goal_state[i][j]:
                goal_i, goal_j = divmod(state[i][j] - 1, 3)
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance

def astar(initial_state):
    open_list = [(heuristic(initial_state), 0, initial_state, [])]
    closed_list = set(tuple(map(tuple, initial_state)))

    while open_list:
        _, cost, state, path = heapq.heappop(open_list)
        if state == goal_state:
            return path + [state]

        for neighbor in get_neighbors(state):
            neighbor_tuple = tuple(map(tuple, neighbor))
            if neighbor_tuple not in closed_list:
                closed_list.add(neighbor_tuple)
                heapq.heappush(open_list, (cost + 1 + heuristic(neighbor), cost + 1, neighbor, path + [state]))

def get_neighbors(state):
    neighbors = []
    zero_row, zero_col = None, None
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                zero_row, zero_col = i, j
                break
    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    for dr, dc in moves:
        new_row, new_col = zero_row + dr, zero_col + dc
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_state = [row[:] for row in state]
            new_state[zero_row][zero_col], new_state[new_row][new_col] = new_state[new_row][new_col], new_state[zero_row][zero_col]
            neighbors.append(new_state)
    return neighbors

initial_state = [[4, 1, 3], [7, 2, 5], [0, 8, 6]]
solution = astar(initial_state)
for state in solution:
    for row in state:
        print(row)
    print()
